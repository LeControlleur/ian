<!DOCTYPE html>
<html lang="fr">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="x-ua-compatible" content="ie=edge">

    <title><%= title %></title>

    <%- include ../template/head.ejs -%>


    <script type="text/javascript">
        if (location.protocol === 'http:' && document.domain === 'rtcmulticonnection.herokuapp.com') {
            location.href = location.href.replace('http:', 'https:');
        }
    </script>

    <script src="/videoconference/demos/menu.js"></script>

</head>

<body class="hold-transition sidebar-mini layout-fixed layout-navbar-fixed layout-footer-fixed">
    <div class="wrapper">



        <%- include ../template/navbar.ejs -%>


        <%- include("../template/sidebar", {user:user}); -%>



        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper">
            <!-- Content Header (Page header) -->
            <div class="content-header">
                <div class="container-fluid">
                    <div class="row mb-2">
                        <div class="col-sm-6">
                            <h1 class="m-0 text-dark">Ma salle de conférence</h1>
                        </div><!-- /.col -->
                        <div class="col-sm-6">
                            <ol class="breadcrumb float-sm-right">
                                <li class="breadcrumb-item text-warning">Accueil</a></li>
                                <li class="breadcrumb-item text-warning">ianWork</a></li>
                                <li class="breadcrumb-item active">Ma salle de conférence</li>
                            </ol>
                        </div><!-- /.col -->
                    </div><!-- /.row -->
                </div><!-- /.container-fluid -->
            </div>
            <!-- /.content-header -->

            <!-- Main content -->
            <section class="content">
                <div class="container-fluid">

                    <!-- Main row -->
                    <div class="row col-md-12 col-lg-12">



                        <div class="col-md-12 col-lg-12">
                            <div style="display: flex; justify-content: center">
                                <label><input type="checkbox" id="record-entire-conference"> Enregistrer la
                                    conférence</label>
                                <span id="recording-status" style="display: none;"></span>
                                <button id="btn-stop-recording" style="display: none;">Stop Recording</button>
                            </div>

                            <div style="display: flex; justify-content: space-around">
                                <input type="text" id="room-id" value="abcdef" autocorrect=off autocapitalize=off
                                    size=20>
                                <button id="open-room" class="btn btn-default">Créer une
                                        salle</button>
                                <button id="join-room" class="btn btn-default">Rejoindre une
                                        salle</button>
                                <button id="open-or-join-room" class="btn btn-default">Auto
                                        Créer ou rejoindre une
                                        salle</button>
                            </div>
                        </div>













                        <div id="room-urls" style="text-align: center;display: none;" class="col-md-12 col-lg-12">
                        </div>











                        <div id="videos-container" style="display: flex; justify-content: center;"></div>














                    </div>
                    <!-- /.row -->
                </div>
                <!--/. container-fluid -->
            </section>
            <!-- /.content -->
        </div>
        <!-- /.content-wrapper -->

        <!-- Control Sidebar -->
        <%- include ../template/controlSidebar.ejs -%>
        <!-- /.control-sidebar -->

    </div>
    <!-- ./wrapper -->

    <!-- REQUIRED SCRIPTS -->
    <%- include ../template/requiredScripts.ejs -%>

    



















    <script src="/videoconference/dist/RTCMultiConnection.min.js"></script>
    <script src="/node_modules/webrtc-adapter/out/adapter.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <!-- custom layout for HTML5 audio/video elements -->
    <link rel="stylesheet" href="/dev/getHTMLMediaElement.css">
    <script src="/videoconference/dev/getHTMLMediaElement.js"></script>

    <script src="/node_modules/recordrtc/RecordRTC.js"></script>
    <script>
        // ......................................................
        // .......................UI Code........................
        // ......................................................
        document.getElementById('open-room').onclick = function () {
            disableInputButtons();
            connection.open(document.getElementById('room-id').value, function (isRoomOpened, roomid, error) {
                if (isRoomOpened === true) {
                    showRoomURL(connection.sessionid);
                }
                else {
                    disableInputButtons(true);
                    if (error === 'Room not available') {
                        alert('Une personne a déjà crée cette salle. Veuillez la rejoindre ou en créer une autre');
                        return;
                    }
                    alert(error);
                }
            });
        };

        document.getElementById('join-room').onclick = function () {
            disableInputButtons();
            connection.join(document.getElementById('room-id').value, function (isJoinedRoom, roomid, error) {
                if (error) {
                    disableInputButtons(true);
                    if (error === 'Room not available') {
                        alert("Cette salle n'existe pas encore. Vous pouvez la créer");
                        return;
                    }
                    alert(error);
                }
            });
        };

        document.getElementById('open-or-join-room').onclick = function () {
            disableInputButtons();
            connection.openOrJoin(document.getElementById('room-id').value, function (isRoomExist, roomid, error) {
                if (error) {
                    disableInputButtons(true);
                    alert(error);
                }
                else if (connection.isInitiator === true) {
                    // if room doesn't exist, it means that current user will create the room
                    showRoomURL(roomid);
                }
            });
        };

        // ......................................................
        // ..................RTCMultiConnection Code.............
        // ......................................................

        var connection = new RTCMultiConnection();

        // by default, socket.io server is assumed to be deployed on your own URL
        connection.socketURL = '/';

        // comment-out below line if you do not have your own socket.io server
        // connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';

        connection.socketMessageEvent = 'video-conference-demo';

        connection.session = {
            audio: true,
            video: true
        };

        connection.sdpConstraints.mandatory = {
            OfferToReceiveAudio: true,
            OfferToReceiveVideo: true
        };

        // https://www.rtcmulticonnection.org/docs/iceServers/
        // use your own TURN-server here!
        connection.iceServers = [{
            'urls': [
                'stun:stun.l.google.com:19302',
                'stun:stun1.l.google.com:19302',
                'stun:stun2.l.google.com:19302',
                'stun:stun.l.google.com:19302?transport=udp',
            ]
        }];

        connection.videosContainer = document.getElementById('videos-container');
        connection.onstream = function (event) {
            var existing = document.getElementById(event.streamid);
            if (existing && existing.parentNode) {
                existing.parentNode.removeChild(existing);
            }

            event.mediaElement.removeAttribute('src');
            event.mediaElement.removeAttribute('srcObject');
            event.mediaElement.muted = true;
            event.mediaElement.volume = 0;

            var video = document.createElement('video');

            video.className = "col-lg-12 col-md-12";
            video.style.borderRadius = "20px";

            try {
                video.setAttributeNode(document.createAttribute('autoplay'));
                video.setAttributeNode(document.createAttribute('playsinline'));
            } catch (e) {
                video.setAttribute('autoplay', true);
                video.setAttribute('playsinline', true);
            }

            if (event.type === 'local') {
                video.volume = 0;
                try {
                    video.setAttributeNode(document.createAttribute('muted'));
                } catch (e) {
                    video.setAttribute('muted', true);
                }
            }
            video.srcObject = event.stream;

            //var width = parseInt(connection.videosContainer.clientWidth / 3) - 20;
            var mediaElement = getHTMLMediaElement(video, {
                title: event.userid,
                buttons: ['full-screen'],
                width: "100%",
                showOnMouseEnter: false
            });

            connection.videosContainer.appendChild(mediaElement);

            setTimeout(function () {
                mediaElement.media.play();
            }, 5000);

            mediaElement.id = event.streamid;

            // to keep room-id in cache
            localStorage.setItem(connection.socketMessageEvent, connection.sessionid);

            chkRecordConference.parentNode.style.display = 'none';

            if (chkRecordConference.checked === true) {
                btnStopRecording.style.display = 'inline-block';
                recordingStatus.style.display = 'inline-block';

                var recorder = connection.recorder;
                if (!recorder) {
                    recorder = RecordRTC([event.stream], {
                        type: 'video'
                    });
                    recorder.startRecording();
                    connection.recorder = recorder;
                }
                else {
                    recorder.getInternalRecorder().addStreams([event.stream]);
                }

                if (!connection.recorder.streams) {
                    connection.recorder.streams = [];
                }

                connection.recorder.streams.push(event.stream);
                recordingStatus.innerHTML = 'Recording ' + connection.recorder.streams.length + ' streams';
            }

            if (event.type === 'local') {
                connection.socket.on('disconnect', function () {
                    if (!connection.getAllParticipants().length) {
                        location.reload();
                    }
                });
            }
        };

        var recordingStatus = document.getElementById('recording-status');
        var chkRecordConference = document.getElementById('record-entire-conference');
        var btnStopRecording = document.getElementById('btn-stop-recording');
        btnStopRecording.onclick = function () {
            var recorder = connection.recorder;
            if (!recorder) return alert('No recorder found.');
            recorder.stopRecording(function () {
                var blob = recorder.getBlob();
                invokeSaveAsDialog(blob);

                connection.recorder = null;
                btnStopRecording.style.display = 'none';
                recordingStatus.style.display = 'none';
                chkRecordConference.parentNode.style.display = 'inline-block';
            });
        };

        connection.onstreamended = function (event) {
            var mediaElement = document.getElementById(event.streamid);
            if (mediaElement) {
                mediaElement.parentNode.removeChild(mediaElement);
            }
        };

        connection.onMediaError = function (e) {
            if (e.message === 'Concurrent mic process limit.') {
                if (DetectRTC.audioInputDevices.length <= 1) {
                    alert('Désolé, il y a une erreur avec les périphériques audio');
                    return;
                }

                var secondaryMic = DetectRTC.audioInputDevices[1].deviceId;
                connection.mediaConstraints.audio = {
                    deviceId: secondaryMic
                };

                connection.join(connection.sessionid);
            }
        };

        // ..................................
        // ALL below scripts are redundant!!!
        // ..................................

        function disableInputButtons(enable) {
            document.getElementById('room-id').onkeyup();

            document.getElementById('open-or-join-room').disabled = !enable;
            document.getElementById('open-room').disabled = !enable;
            document.getElementById('join-room').disabled = !enable;
            document.getElementById('room-id').disabled = !enable;
        }

        // ......................................................
        // ......................Handling Room-ID................
        // ......................................................

        function showRoomURL(roomid) {
            var roomHashURL = '#' + roomid;
            href = document.location.href;

            var html = '<h2>Unique URL de la salle:  </h2>';

            html += '<a href="' + roomHashURL + '" target="_blank">' + href + roomHashURL + '</a>';
            var roomURLsDiv = document.getElementById('room-urls');
            roomURLsDiv.innerHTML = html;

            roomURLsDiv.style.display = 'block';
        }

        (function () {
            var params = {},
                r = /([^&=]+)=?([^&]*)/g;

            function d(s) {
                return decodeURIComponent(s.replace(/\+/g, ' '));
            }
            var match, search = window.location.search;
            while (match = r.exec(search.substring(1)))
                params[d(match[1])] = d(match[2]);
            window.params = params;
        })();

        var roomid = '';
        if (localStorage.getItem(connection.socketMessageEvent)) {
            roomid = localStorage.getItem(connection.socketMessageEvent);
        } else {
            roomid = connection.token();
        }

        var txtRoomId = document.getElementById('room-id');
        txtRoomId.value = roomid;
        txtRoomId.onkeyup = txtRoomId.oninput = txtRoomId.onpaste = function () {
            localStorage.setItem(connection.socketMessageEvent, document.getElementById('room-id').value);
        };

        var hashString = location.hash.replace('#', '');
        if (hashString.length && hashString.indexOf('comment-') == 0) {
            hashString = '';
        }

        var roomid = params.roomid;
        if (!roomid && hashString.length) {
            roomid = hashString;
        }

        if (roomid && roomid.length) {
            document.getElementById('room-id').value = roomid;
            localStorage.setItem(connection.socketMessageEvent, roomid);

            // auto-join-room
            (function reCheckRoomPresence() {
                connection.checkPresence(roomid, function (isRoomExist) {
                    if (isRoomExist) {
                        connection.join(roomid);
                        return;
                    }

                    setTimeout(reCheckRoomPresence, 5000);
                });
            })();

            disableInputButtons();
        }

        // detect 2G
        if (navigator.connection &&
            navigator.connection.type === 'cellular' &&
            navigator.connection.downlinkMax <= 0.115) {
            alert("La 2G n'est pas supporté. Veuillez utilisee une connexion plus rapide.");
        }
    </script>

    <footer>
        <small id="send-message"></small>
    </footer>

    <script async defer src="https://buttons.github.io/buttons.js"></script>
    <script src="https://www.webrtc-experiment.com/common.js"></script>





</body>

</html>